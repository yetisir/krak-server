import GraphJob from '@/components/ObjectGraph/GraphJob';
import GraphNode from '@/components/ObjectGraph/GraphNode';
import GraphNetwork from '@/components/ObjectGraph/GraphNetwork';

const graphqlResponse = {
  data: {
    workflows: [
      {
        id: 'kinow|families2',
        status: 'running',
        nodesEdges: {
          nodes: [
            {
              id: 'kinow|families2|20651108T1515+13|foo',
              label: 'kinow|families2|20651108T1515+13|foo',
              parent: {
                id: 'kinow|families2|20651108T1515+13|FAM3',
                state: 'succeeded',
              },
              state: 'succeeded',
              isHeld: false,
              cyclePoint: '20651108T1515+13',
              task: {
                name: 'foo',
              },
              jobs: [
                {
                  id: 'kinow|families2|20651108T1515+13|foo|1',
                  batchSysName: 'background',
                  batchSysJobId: '4483',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:46+13:00',
                  submittedTime: '2019-11-08T15:19:45+13:00',
                  finishedTime: '2019-11-08T15:19:51+13:00',
                  state: 'succeeded',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20651108T1515+13|bar',
              label: 'kinow|families2|20651108T1515+13|bar',
              parent: {
                id: 'kinow|families2|20651108T1515+13|FAM3',
                state: 'succeeded',
              },
              state: 'succeeded',
              isHeld: false,
              cyclePoint: '20651108T1515+13',
              task: {
                name: 'bar',
              },
              jobs: [
                {
                  id: 'kinow|families2|20651108T1515+13|bar|1',
                  batchSysName: 'background',
                  batchSysJobId: '4482',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:46+13:00',
                  submittedTime: '2019-11-08T15:19:45+13:00',
                  finishedTime: '2019-11-08T15:19:51+13:00',
                  state: 'succeeded',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20651108T1515+13|qux',
              label: 'kinow|families2|20651108T1515+13|qux',
              parent: {
                id: 'kinow|families2|20651108T1515+13|FAM6',
                state: 'running',
              },
              state: 'running',
              isHeld: false,
              cyclePoint: '20651108T1515+13',
              task: {
                name: 'qux',
              },
              jobs: [
                {
                  id: 'kinow|families2|20651108T1515+13|qux|1',
                  batchSysName: 'background',
                  batchSysJobId: '4904',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:54+13:00',
                  submittedTime: '2019-11-08T15:19:53+13:00',
                  finishedTime: '',
                  state: 'running',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20661108T1515+13|foo',
              label: 'kinow|families2|20661108T1515+13|foo',
              parent: {
                id: 'kinow|families2|20661108T1515+13|FAM3',
                state: 'succeeded',
              },
              state: 'succeeded',
              isHeld: false,
              cyclePoint: '20661108T1515+13',
              task: {
                name: 'foo',
              },
              jobs: [
                {
                  id: 'kinow|families2|20661108T1515+13|foo|1',
                  batchSysName: 'background',
                  batchSysJobId: '4613',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:48+13:00',
                  submittedTime: '2019-11-08T15:19:47+13:00',
                  finishedTime: '2019-11-08T15:19:53+13:00',
                  state: 'succeeded',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20661108T1515+13|bar',
              label: 'kinow|families2|20661108T1515+13|bar',
              parent: {
                id: 'kinow|families2|20661108T1515+13|FAM3',
                state: 'succeeded',
              },
              state: 'succeeded',
              isHeld: false,
              cyclePoint: '20661108T1515+13',
              task: {
                name: 'bar',
              },
              jobs: [
                {
                  id: 'kinow|families2|20661108T1515+13|bar|1',
                  batchSysName: 'background',
                  batchSysJobId: '4612',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:48+13:00',
                  submittedTime: '2019-11-08T15:19:47+13:00',
                  finishedTime: '2019-11-08T15:19:53+13:00',
                  state: 'succeeded',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20661108T1515+13|qux',
              label: 'kinow|families2|20661108T1515+13|qux',
              parent: {
                id: 'kinow|families2|20661108T1515+13|FAM6',
                state: 'running',
              },
              state: 'running',
              isHeld: false,
              cyclePoint: '20661108T1515+13',
              task: {
                name: 'qux',
              },
              jobs: [
                {
                  id: 'kinow|families2|20661108T1515+13|qux|1',
                  batchSysName: 'background',
                  batchSysJobId: '4954',
                  host: 'localhost',
                  startedTime: '2019-11-08T15:19:57+13:00',
                  submittedTime: '2019-11-08T15:19:56+13:00',
                  finishedTime: '',
                  state: 'running',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20671108T1515+13|foo',
              label: 'kinow|families2|20671108T1515+13|foo',
              parent: {
                id: 'kinow|families2|20671108T1515+13|FAM3',
                state: 'ready',
              },
              state: 'ready',
              isHeld: false,
              cyclePoint: '20671108T1515+13',
              task: {
                name: 'foo',
              },
              jobs: [
                {
                  id: 'kinow|families2|20671108T1515+13|foo|1',
                  batchSysName: 'background',
                  batchSysJobId: '',
                  host: 'localhost',
                  startedTime: '',
                  submittedTime: '',
                  finishedTime: '',
                  state: 'ready',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20671108T1515+13|bar',
              label: 'kinow|families2|20671108T1515+13|bar',
              parent: {
                id: 'kinow|families2|20671108T1515+13|FAM3',
                state: 'ready',
              },
              state: 'ready',
              isHeld: false,
              cyclePoint: '20671108T1515+13',
              task: {
                name: 'bar',
              },
              jobs: [
                {
                  id: 'kinow|families2|20671108T1515+13|bar|1',
                  batchSysName: 'background',
                  batchSysJobId: '',
                  host: 'localhost',
                  startedTime: '',
                  submittedTime: '',
                  finishedTime: '',
                  state: 'ready',
                  submitNum: 1,
                },
              ],
            },
            {
              id: 'kinow|families2|20671108T1515+13|qux',
              label: 'kinow|families2|20671108T1515+13|qux',
              parent: {
                id: 'kinow|families2|20671108T1515+13|FAM6',
                state: 'waiting',
              },
              state: 'waiting',
              isHeld: false,
              cyclePoint: '20671108T1515+13',
              task: {
                name: 'qux',
              },
              jobs: [],
            },
          ],
          edges: [
            {
              id: 'kinow|families2|foo.20651108T1515+13|qux.20651108T1515+13',
              source: 'kinow|families2|20651108T1515+13|foo',
              target: 'kinow|families2|20651108T1515+13|qux',
              label:
                'kinow|families2|foo.20651108T1515+13|qux.20651108T1515+13',
            },
            {
              id: 'kinow|families2|bar.20651108T1515+13|qux.20651108T1515+13',
              source: 'kinow|families2|20651108T1515+13|bar',
              target: 'kinow|families2|20651108T1515+13|qux',
              label:
                'kinow|families2|bar.20651108T1515+13|qux.20651108T1515+13',
            },
            {
              id: 'kinow|families2|bar.20671108T1515+13|qux.20671108T1515+13',
              source: 'kinow|families2|20671108T1515+13|bar',
              target: 'kinow|families2|20671108T1515+13|qux',
              label:
                'kinow|families2|bar.20671108T1515+13|qux.20671108T1515+13',
            },
            {
              id: 'kinow|families2|foo.20671108T1515+13|qux.20671108T1515+13',
              source: 'kinow|families2|20671108T1515+13|foo',
              target: 'kinow|families2|20671108T1515+13|qux',
              label:
                'kinow|families2|foo.20671108T1515+13|qux.20671108T1515+13',
            },
            {
              id: 'kinow|families2|bar.20661108T1515+13|qux.20661108T1515+13',
              source: 'kinow|families2|20661108T1515+13|bar',
              target: 'kinow|families2|20661108T1515+13|qux',
              label:
                'kinow|families2|bar.20661108T1515+13|qux.20661108T1515+13',
            },
            {
              id: 'kinow|families2|foo.20661108T1515+13|qux.20661108T1515+13',
              source: 'kinow|families2|20661108T1515+13|foo',
              target: 'kinow|families2|20661108T1515+13|qux',
              label:
                'kinow|families2|foo.20661108T1515+13|qux.20661108T1515+13',
            },
          ],
        },
      },
    ],
  },
};

// job/task statuses
const statuses = ['running', 'succeeded', 'failed'];

// return a random status
function randomStatus() {
  return statuses[Math.floor(Math.random() * statuses.length)];
}

// let's modify the statuses every 3 seconds
setInterval(function() {
  const workflow = graphqlResponse.data.workflows[0];
  workflow.nodesEdges.nodes.map((node) => {
    if (
      Object.hasOwnProperty.call(node, 'state') &&
      node.state !== undefined &&
      node.state !== ''
    ) {
      node.state = randomStatus();
    }
  });
}, 3000);

export default {
  components: {
    GraphJob,
    GraphNetwork,
    GraphNode,
  },
  data() {
    return {
      queryResponse: graphqlResponse,
      overlay: false,
    };
  },
  computed: {
    workflow: function() {
      return this.queryResponse.data.workflows[0];
    },
    nodes: function() {
      return this.workflow.nodesEdges.nodes;
    },
    elements: function() {
      // structure used by cytoscape
      const elements = {
        nodes: [],
        edges: [],
      };

      // I thought nodes would contain all the valid nodes, but it looks like some are only
      // available in the edges section (as target/source), so we loop twice to populate
      // all the nodes
      this.workflow.nodesEdges.nodes.map((node) => {
        elements.nodes.push({
          data: {
            id: node.id,
            name: node.task.name, // used to display the value in the graph,
            status: node.state,
          },
        });
      });
      this.workflow.nodesEdges.edges.map((edge) => {
        elements.nodes.push({
          data: {
            id: edge.source,
          },
        });
        elements.nodes.push({
          data: {
            id: edge.target,
          },
        });
      });

      // then we add all the edges
      this.workflow.nodesEdges.edges.map((edge) => {
        elements.edges.push({
          data: {
            source: edge.source,
            target: edge.target,
          },
        });
      });
      return elements;
    },
  },
};
